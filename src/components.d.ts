/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface KwcCalendar {
        "adjustPopupToInput": boolean;
        "mode": 'static' | 'popup';
        "popupOffset": number;
    }
    interface KwcPopup {
        "adjustWidth": (adjustWidthEl: HTMLElement) => Promise<void>;
        "close": () => Promise<void>;
        "isOpen": () => Promise<boolean>;
        "mode": 'static' | 'popup';
        "open": (anchorEl: HTMLElement, offset: number) => Promise<void>;
        "registerCloseOutside": (closeOutsideEl: HTMLElement) => Promise<void>;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface KwcCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKwcCalendarElement;
}
declare global {
    interface HTMLKwcCalendarElementEventMap {
        "date-changed": Date;
    }
    interface HTMLKwcCalendarElement extends Components.KwcCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKwcCalendarElementEventMap>(type: K, listener: (this: HTMLKwcCalendarElement, ev: KwcCalendarCustomEvent<HTMLKwcCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKwcCalendarElementEventMap>(type: K, listener: (this: HTMLKwcCalendarElement, ev: KwcCalendarCustomEvent<HTMLKwcCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKwcCalendarElement: {
        prototype: HTMLKwcCalendarElement;
        new (): HTMLKwcCalendarElement;
    };
    interface HTMLKwcPopupElement extends Components.KwcPopup, HTMLStencilElement {
    }
    var HTMLKwcPopupElement: {
        prototype: HTMLKwcPopupElement;
        new (): HTMLKwcPopupElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "kwc-calendar": HTMLKwcCalendarElement;
        "kwc-popup": HTMLKwcPopupElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface KwcCalendar {
        "adjustPopupToInput"?: boolean;
        "mode"?: 'static' | 'popup';
        "onDate-changed"?: (event: KwcCalendarCustomEvent<Date>) => void;
        "popupOffset"?: number;
    }
    interface KwcPopup {
        "mode"?: 'static' | 'popup';
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "kwc-calendar": KwcCalendar;
        "kwc-popup": KwcPopup;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kwc-calendar": LocalJSX.KwcCalendar & JSXBase.HTMLAttributes<HTMLKwcCalendarElement>;
            "kwc-popup": LocalJSX.KwcPopup & JSXBase.HTMLAttributes<HTMLKwcPopupElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
