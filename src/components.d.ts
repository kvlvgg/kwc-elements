/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { KwcCalendarValueChanged } from "./utils/date/events";
import { PassTrough } from "./components/kwc-date-picker/types";
export { KwcCalendarValueChanged } from "./utils/date/events";
export { PassTrough } from "./components/kwc-date-picker/types";
export namespace Components {
    interface KwcCalendar {
        "locale": string | null;
        "value": Date | string | null;
    }
    interface KwcDatePicker {
        "adjustPopupToInput": boolean;
        "pt": PassTrough;
        "type": 'datetime' | 'date' | 'time';
        "value": Date | string | null;
    }
    interface KwcInputGroup {
        "value": string;
    }
    interface KwcPopup {
        "adjustWidth": (adjustWidthEl: HTMLElement) => Promise<void>;
        "close": () => Promise<void>;
        "inline": boolean;
        "isOpen": () => Promise<boolean>;
        "offsetY": number;
        "open": (anchorEl: HTMLElement) => Promise<void>;
        "registerCloseOutside": (closeOutsideEl: HTMLElement) => Promise<void>;
    }
    interface KwcTime {
        "locale": string | null;
        "value": Date | string | null;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface KwcCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKwcCalendarElement;
}
export interface KwcDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKwcDatePickerElement;
}
export interface KwcPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKwcPopupElement;
}
export interface KwcTimeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKwcTimeElement;
}
declare global {
    interface HTMLKwcCalendarElementEventMap {
        "valueChanged": KwcCalendarValueChanged;
    }
    interface HTMLKwcCalendarElement extends Components.KwcCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKwcCalendarElementEventMap>(type: K, listener: (this: HTMLKwcCalendarElement, ev: KwcCalendarCustomEvent<HTMLKwcCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKwcCalendarElementEventMap>(type: K, listener: (this: HTMLKwcCalendarElement, ev: KwcCalendarCustomEvent<HTMLKwcCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKwcCalendarElement: {
        prototype: HTMLKwcCalendarElement;
        new (): HTMLKwcCalendarElement;
    };
    interface HTMLKwcDatePickerElementEventMap {
        "valueChanged": Date;
    }
    interface HTMLKwcDatePickerElement extends Components.KwcDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKwcDatePickerElementEventMap>(type: K, listener: (this: HTMLKwcDatePickerElement, ev: KwcDatePickerCustomEvent<HTMLKwcDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKwcDatePickerElementEventMap>(type: K, listener: (this: HTMLKwcDatePickerElement, ev: KwcDatePickerCustomEvent<HTMLKwcDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKwcDatePickerElement: {
        prototype: HTMLKwcDatePickerElement;
        new (): HTMLKwcDatePickerElement;
    };
    interface HTMLKwcInputGroupElement extends Components.KwcInputGroup, HTMLStencilElement {
    }
    var HTMLKwcInputGroupElement: {
        prototype: HTMLKwcInputGroupElement;
        new (): HTMLKwcInputGroupElement;
    };
    interface HTMLKwcPopupElementEventMap {
        "closed": any;
        "opened": any;
    }
    interface HTMLKwcPopupElement extends Components.KwcPopup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKwcPopupElementEventMap>(type: K, listener: (this: HTMLKwcPopupElement, ev: KwcPopupCustomEvent<HTMLKwcPopupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKwcPopupElementEventMap>(type: K, listener: (this: HTMLKwcPopupElement, ev: KwcPopupCustomEvent<HTMLKwcPopupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKwcPopupElement: {
        prototype: HTMLKwcPopupElement;
        new (): HTMLKwcPopupElement;
    };
    interface HTMLKwcTimeElementEventMap {
        "valueChanged": KwcCalendarValueChanged;
    }
    interface HTMLKwcTimeElement extends Components.KwcTime, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKwcTimeElementEventMap>(type: K, listener: (this: HTMLKwcTimeElement, ev: KwcTimeCustomEvent<HTMLKwcTimeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKwcTimeElementEventMap>(type: K, listener: (this: HTMLKwcTimeElement, ev: KwcTimeCustomEvent<HTMLKwcTimeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKwcTimeElement: {
        prototype: HTMLKwcTimeElement;
        new (): HTMLKwcTimeElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "kwc-calendar": HTMLKwcCalendarElement;
        "kwc-date-picker": HTMLKwcDatePickerElement;
        "kwc-input-group": HTMLKwcInputGroupElement;
        "kwc-popup": HTMLKwcPopupElement;
        "kwc-time": HTMLKwcTimeElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface KwcCalendar {
        "locale"?: string | null;
        "onValueChanged"?: (event: KwcCalendarCustomEvent<KwcCalendarValueChanged>) => void;
        "value"?: Date | string | null;
    }
    interface KwcDatePicker {
        "adjustPopupToInput"?: boolean;
        "onValueChanged"?: (event: KwcDatePickerCustomEvent<Date>) => void;
        "pt"?: PassTrough;
        "type"?: 'datetime' | 'date' | 'time';
        "value"?: Date | string | null;
    }
    interface KwcInputGroup {
        "value"?: string;
    }
    interface KwcPopup {
        "inline"?: boolean;
        "offsetY"?: number;
        "onClosed"?: (event: KwcPopupCustomEvent<any>) => void;
        "onOpened"?: (event: KwcPopupCustomEvent<any>) => void;
    }
    interface KwcTime {
        "locale"?: string | null;
        "onValueChanged"?: (event: KwcTimeCustomEvent<KwcCalendarValueChanged>) => void;
        "value"?: Date | string | null;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "kwc-calendar": KwcCalendar;
        "kwc-date-picker": KwcDatePicker;
        "kwc-input-group": KwcInputGroup;
        "kwc-popup": KwcPopup;
        "kwc-time": KwcTime;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kwc-calendar": LocalJSX.KwcCalendar & JSXBase.HTMLAttributes<HTMLKwcCalendarElement>;
            "kwc-date-picker": LocalJSX.KwcDatePicker & JSXBase.HTMLAttributes<HTMLKwcDatePickerElement>;
            "kwc-input-group": LocalJSX.KwcInputGroup & JSXBase.HTMLAttributes<HTMLKwcInputGroupElement>;
            "kwc-popup": LocalJSX.KwcPopup & JSXBase.HTMLAttributes<HTMLKwcPopupElement>;
            "kwc-time": LocalJSX.KwcTime & JSXBase.HTMLAttributes<HTMLKwcTimeElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
