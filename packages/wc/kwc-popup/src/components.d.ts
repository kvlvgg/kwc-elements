/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface KwcPopup {
        "adjustWidth": (adjustWidthEl: HTMLElement) => Promise<void>;
        "close": () => Promise<void>;
        /**
          * @default false
         */
        "inline": boolean;
        "isOpen": () => Promise<boolean>;
        /**
          * @default 0
         */
        "offsetY": number;
        "open": (anchorEl: HTMLElement) => Promise<void>;
        "registerCloseOutside": (closeOutsideEl: HTMLElement) => Promise<void>;
    }
}
export interface KwcPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKwcPopupElement;
}
declare global {
    interface HTMLKwcPopupElementEventMap {
        "closed": any;
        "opened": any;
    }
    interface HTMLKwcPopupElement extends Components.KwcPopup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKwcPopupElementEventMap>(type: K, listener: (this: HTMLKwcPopupElement, ev: KwcPopupCustomEvent<HTMLKwcPopupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKwcPopupElementEventMap>(type: K, listener: (this: HTMLKwcPopupElement, ev: KwcPopupCustomEvent<HTMLKwcPopupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKwcPopupElement: {
        prototype: HTMLKwcPopupElement;
        new (): HTMLKwcPopupElement;
    };
    interface HTMLElementTagNameMap {
        "kwc-popup": HTMLKwcPopupElement;
    }
}
declare namespace LocalJSX {
    interface KwcPopup {
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * @default 0
         */
        "offsetY"?: number;
        "onClosed"?: (event: KwcPopupCustomEvent<any>) => void;
        "onOpened"?: (event: KwcPopupCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "kwc-popup": KwcPopup;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kwc-popup": LocalJSX.KwcPopup & JSXBase.HTMLAttributes<HTMLKwcPopupElement>;
        }
    }
}
